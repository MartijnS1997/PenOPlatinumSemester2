package internal;

import static java.lang.Math.sin;

/**
 * Created by Martijn on 13/02/2018.
 *
 */
//TODO: checker for tyre position
public class TyrePhysX {

    public TyrePhysX(Vector tyrePosition, float tyreRadius, float tyreSlope, float dampSlope, float maxBrake, float maxFricCoeff) {
        this.tyrePosition = tyrePosition;
        this.tyreRadius = tyreRadius;
        this.tyreSlope = tyreSlope;
        this.dampSlope = dampSlope;
        this.maxBrake = maxBrake;
        this.maxFricCoeff = maxFricCoeff;
    }

    public Vector getNetForceTyre(Vector orientation, Vector rotation, Vector position, Vector velocity, float breakForce){
        float groundDist = this.getTyreDistanceToGround(orientation, position);
        //if the tyre doesn't touch the ground, the exerted force is zero
        if(groundDist >= this.getTyreRadius()){
            return new Vector();
        }
        //not so easy case:


    }

    /**
     * Calculates the normal force exerted on the tyre, given in the world axis system
     * @param orientation
     * @param rotation
     * @param position
     * @return
     */
    public Vector getNormalForce(Vector orientation, Vector rotation, Vector position, float deltaTime){
        float tyreDelta = this.calcRadiusDelta(orientation, position);
        if(tyreDelta <= 0){
            return new Vector();
        }
        //calculate the force generated by the tyreslope
        float tyreSlope = this.getTyreSlope();
        float tyreSlopeForce = tyreSlope*tyreDelta;

        //dampSlope force calculation
        float dampSlope = this.getDampSlope();
        float prevTyreDelta = this.getPrevRadiusDelta();
        float deltaTyreDelta = tyreDelta - prevTyreDelta;
        float deltaDiff = deltaTyreDelta/deltaTime;
        float dampSlopeForce = dampSlope*deltaDiff;

        return new Vector(0f, tyreSlopeForce + dampSlopeForce, 0f);
    }

    public Vector getAbsoluteVelocity(Vector orientation, Vector rotation, Vector velocity){
        return null;
    }

    /**
     * Calculates the radius delta, may return a negative delta, means that the tyre is not on the ground
     * @param orientation the orientation of the drone
     * @param position the position of the drone
     * @return the radius delta
     */
    private float calcRadiusDelta(Vector orientation, Vector position){
        float groundDist = this.getTyreDistanceToGround(orientation, position);
        float tyreRad = this.getTyreRadius();

        return tyreRad - groundDist;
    }

    /**
     * Calculates the distance from the center of the tyre to the ground seen parallel from the orientation
     * of the tyre
     * @param orientation the orientation of the drone
     * @param position position of the drone
     * @return the distance to the ground
     */
    private float getTyreDistanceToGround(Vector orientation, Vector position){
        //calculate the position of the center of the tyre in the world axis system
        Vector tyrePos = this.getTyrePosition();
        //transform to world axis
        tyrePos = PhysXEngine.droneOnWorld(tyrePos, orientation);
        //calculate the abs pos:
        Vector worldTyrePos = tyrePos.vectorSum(position);
        //get the height of the center coord of the tyre
        float centerHeight = worldTyrePos.getyValue();
        //get the roll of the plane
        float roll = orientation.getzValue();

        //calculate the distance from the center of the tyre to the ground parallel to the tyre orientation
        return (float) (centerHeight/sin(roll));
    }

    public Vector getTyrePosition() {
        return tyrePosition;
    }

    public float getTyreRadius() {
        return tyreRadius;
    }

    public float getTyreSlope() {
        return tyreSlope;
    }

    public float getDampSlope() {
        return dampSlope;
    }

    public float getMaxBrake() {
        return maxBrake;
    }

    public float getMaxFricCoeff() {
        return maxFricCoeff;
    }

    public float getPrevRadiusDelta() {
        return prevRadiusDelta;
    }

    public void setPrevRadiusDelta(float prevRadiusDelta) {
        this.prevRadiusDelta = prevRadiusDelta;
    }

    private Vector tyrePosition;
    private float tyreRadius;
    private float tyreSlope;
    private float dampSlope;
    private float maxBrake;
    private float maxFricCoeff;
    private float prevRadiusDelta; //D from the assignment


}
