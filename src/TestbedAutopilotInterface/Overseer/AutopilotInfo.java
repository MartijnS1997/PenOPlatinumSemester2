package TestbedAutopilotInterface.Overseer;

import internal.Autopilot.AutopilotState;
import internal.Autopilot.FlightPath;
import internal.Helper.Vector;

/**
 * Created by Martijn on 30/04/2018.
 * A class containing the information needed by the autopilots for the
 * collision controls
 * note that the first info generated by a finite state machine will always be an INIT-info
 * containing only the state --> the collision detection should be able to cope with it
 *
 * note that we do not include the current approximation of the velocity of the drone, that is something
 * the autopilot that has to avoid the collision should deal with
 */
public interface AutopilotInfo {

    /**
     * Getter for the drone ID, this string contains the id of the drone where this information comes from
     * @return a string containing the ID of the drone
     */
    String droneID();


    /**
     * Getter for the current position of the drone
     * @return a vector containing the position of the drone in world axis system
     */
    Vector getCurrentPosition();

    /**
     * Getter for the previous position of the drone
     * --> this parameter is included to infer the velocity from, the state machine should not be bothered with
     *     extra calculations, we leave that up to the user of it
     * @return a vector containing the previous position of the drone
     */
    Vector getPreviousPosition();

    /**
     * Getter for the simulation time that passed between the current and the previous position
     * --> is used to infer the velocity from
     * @return the time that has passed for the drone ton get from previous position to current position
     */
    float getDeltaTime();

    /**
     * Getter for the cruising altitude of the drone (assigned by the overseer)
     * @return the altitude of the drone
     */
    float getCruisingAltitude();

    /**
     * Getter for the state of the autopilot, this is used to indicate what the drone is currently doing
     * @return the state of the autopilot
     */
    AutopilotState getAutopilotState();

    /**
     * The flight path of the drone, if the drone is currently in the flight phase
     * @return the flight path of the drone, if the drone is not in the flight phase this call will return null
     */
    FlightPath getFlightPath();

    /**
     * Generates initial info to indicate that the autopilot is still configuring itself
     * this signals to the collision detection that the drone is not yet in flight and should not be worried about
     * @return an autopilot info containing only the autopilot state filled in as INIT_FLIGHT (other values are defaults)
     */
   static AutopilotInfo generateInitInfo(){
        return new AutopilotInfo() {
            @Override
            public String droneID() {
                return null;
            }

            @Override
            public Vector getCurrentPosition() {
                return null;
            }

            @Override
            public Vector getPreviousPosition() {
                return null;
            }

            @Override
            public float getDeltaTime() {
                return 0;
            }

            @Override
            public float getCruisingAltitude() {
                return 0;
            }

            @Override
            public AutopilotState getAutopilotState() {
                return AutopilotState.INIT_FLIGHT;
            }

            @Override
            public FlightPath getFlightPath() {
                return null;
            }
        };
    }
}
